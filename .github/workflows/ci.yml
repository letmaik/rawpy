name: CI

on: [push, pull_request]

permissions: read-all

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        config:
        - os-image: ubuntu-latest
          os-name: linux
          docker-image: quay.io/pypa/manylinux2014_x86_64
          python-version: '3.6'
          numpy-version: '1.11.*'
        - os-image: ubuntu-latest
          os-name: linux
          docker-image: quay.io/pypa/manylinux2014_x86_64
          python-version: '3.7'
          numpy-version: '1.14.*'
        - os-image: ubuntu-latest
          os-name: linux
          docker-image: quay.io/pypa/manylinux2014_x86_64
          python-version: '3.8'
          numpy-version: '1.17.*'
        - os-image: ubuntu-latest
          os-name: linux
          docker-image: quay.io/pypa/manylinux2014_x86_64
          python-version: '3.9'
          numpy-version: '1.19.*'

        - os-image: ubuntu-latest
          os-name: linux
          docker-image: quay.io/pypa/manylinux2014_aarch64
          python-version: '3.7'
          numpy-version: '1.19.*'
        - os-image: ubuntu-latest
          os-name: linux
          docker-image: quay.io/pypa/manylinux2014_aarch64
          python-version: '3.8'
          numpy-version: '1.19.*'
        - os-image: ubuntu-latest
          os-name: linux
          docker-image: quay.io/pypa/manylinux2014_aarch64
          python-version: '3.9'
          numpy-version: '1.19.*'

        # Ideally 10.6 (same as offical Python installer) but there
        # are issues targeting that with newer XCode versions.
        # As likely nobody is using 10.6 anymore, targeting 10.9 is acceptable.
        # See https://github.com/pandas-dev/pandas/issues/23424#issuecomment-446393981.
        - os-image: macos-latest
          os-name: mac
          macos-min-version: '10.9'
          python-version: '3.6'
          numpy-version: '1.11.*'
        - os-image: macos-latest
          os-name: mac
          macos-min-version: '10.9'
          python-version: '3.7'
          numpy-version: '1.14.*'
        - os-image: macos-latest
          os-name: mac
          macos-min-version: '10.9'
          python-version: '3.8'
          numpy-version: '1.17.*'
        - os-image: macos-latest
          os-name: mac
          macos-min-version: '10.9'
          python-version: '3.9'
          numpy-version: '1.19.*'

        - os-image: windows-latest
          os-name: windows
          python-version: '3.6'
          python-arch: '64'
          numpy-version: '1.11'
        - os-image: windows-latest
          os-name: windows
          python-version: '3.7'
          python-arch: '64'
          numpy-version: '1.14'
        - os-image: windows-latest
          os-name: windows
          python-version: '3.8'
          python-arch: '64'
          numpy-version: '1.17'
        - os-image: windows-latest
          os-name: windows
          python-version: '3.9'
          python-arch: '64'
          numpy-version: '1.19'

    runs-on: ${{ matrix.config.os-image }}

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true

    - name: Set up QEMU
      if: matrix.config.docker-image == 'quay.io/pypa/manylinux2014_aarch64'
      id: qemu
      uses: docker/setup-qemu-action@v1

    - name: Build wheels (Linux)
      if: matrix.config.os-name == 'linux'
      run: docker run --rm -e PYTHON_VERSION -e NUMPY_VERSION -v `pwd`:/io ${{ matrix.config.docker-image }} /io/.github/scripts/build-linux.sh
      env:
        PYTHON_VERSION: ${{ matrix.config.python-version }}
        NUMPY_VERSION: ${{ matrix.config.numpy-version }}

    - name: Build wheels (macOS)
      if: matrix.config.os-name == 'mac'
      run: .github/scripts/build-macos.sh
      env:
        MACOS_MIN_VERSION: ${{ matrix.config.macos-min-version }}
        PYTHON_VERSION: ${{ matrix.config.python-version }}
        NUMPY_VERSION: ${{ matrix.config.numpy-version }}

    - name: Build wheels (Windows)
      if: matrix.config.os-name == 'windows'
      run: .github/scripts/build-windows.ps1
      shell: pwsh
      env:
        PYTHON_VERSION: ${{ matrix.config.python-version }}
        PYTHON_ARCH: ${{ matrix.config.python-arch }}
        NUMPY_VERSION: ${{ matrix.config.numpy-version }}

    - name: Store wheels as artifacts
      uses: actions/upload-artifact@v1
      with:
        name: wheels
        path: dist

  docs:
    runs-on: ubuntu-latest

    needs: build

    steps:
    - uses: actions/checkout@v1
   
    - name: Setup Python
      uses: actions/setup-python@v1
      with:
        python-version: '3.7'

    - name: Download wheels from artifact storage
      uses: actions/download-artifact@v1
      with:
        name: wheels
        path: dist

    - name: Install rawpy from wheel
      run: |
        pip install --no-deps rawpy --no-index -f dist
        pip install -r dev-requirements.txt

    - name: Build docs
      run: sphinx-build -b html docs dist-docs

    - name: Store docs HTML as artifact
      uses: actions/upload-artifact@v1
      with:
        name: docs
        path: dist-docs

  publish-wheels:
    runs-on: ubuntu-latest

    needs: [build, docs]

    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Download wheels from artifact storage
      uses: actions/download-artifact@v1
      with:
        name: wheels
        path: dist

    - name: Setup Python
      uses: actions/setup-python@v1
    
    - name: Upload wheels to PyPI
      run: |
        pip install twine
        twine upload -u __token__ -p ${{ secrets.PYPI_TOKEN }} --skip-existing dist/*

  publish-docs:
    runs-on: ubuntu-latest

    needs: [publish-wheels]

    permissions:
      contents: write

    steps:
    - name: Download docs HTML from artifact storage
      uses: actions/download-artifact@v1
      with:
        name: docs
        path: dist-docs

    - name: Upload docs to GitHub Pages
      uses: peaceiris/actions-gh-pages@47a6d63ea8b47b19328e258563aa1fbe224c0a23
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PUBLISH_BRANCH: gh-pages
        PUBLISH_DIR: ./dist-docs
